# Gentoo BLAS/LAPACK chain loading

**This is highly experimental.**

## Overview

Netlib specifications do not mandate the presence of BLAS/LAPACK/etc symbols to be present
in the same library. In fact, they do not even require the libraries to be named
`libblas.so, libcblas.so` or otherwise

This mechanism strictly follows those recommendations and allows creation of dummy
empty libraries, which chain load the libraries with actual symbols, resulting in a
very simple technique to link any library (or set of libaries) as a provider.

## Advantages

- Very simple eclass to register a provider
- No fiddling around with sources to find exact speficications

## Disadvantages

- Breaks false promises of `dlopen` on these libraries.

This is actually not something that we are breaking specifically at this point.   
This problem already happens if we use Intel MKL-RT as the *provider* library,
as doing a `dlopen` on that already causes symbol resolution errors.

## Testings

So far, testing has been done with numpy and scipy, both heavy users of these libraries
and they have been working perfectly.

## Debugging

There are some simple programs in the DEBUG directory which contains C++, fortran and
python code to do a very simple matrix multiplication of 1500x1500.

To check if the BLAS LAPACK switch has worked on your computer just go into the
DEBUG directory and do - make run.
There should be a noticeable difference in the run time after doing a switch
using eselect library set blas <openblas/mkl> as opposed to when you do not have
any provider selected - eselect library unset blas

## Future work

- Can we do a function redirection to the appropriate libraries, without a dlopen ?
  [Flexiblas](https://github.com/mpimd-csc/flexiblas/) does something similar but
  that is overkill for our simple problem.
  Does there exist some linker magic